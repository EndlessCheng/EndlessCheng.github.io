<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[简言]]></title>
  <subtitle><![CDATA[言简意赅，技术远没那么复杂]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jianyan.me/"/>
  <updated>2015-03-19T13:36:54.899Z</updated>
  <id>http://jianyan.me/</id>
  
  <author>
    <name><![CDATA[简言]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[re.compile() 函数的一个小改进]]></title>
    <link href="http://jianyan.me/2015/03/19/recompile-a-small-improvement/"/>
    <id>http://jianyan.me/2015/03/19/recompile-a-small-improvement/</id>
    <published>2015-03-19T13:35:00.000Z</published>
    <updated>2015-03-19T13:35:20.000Z</updated>
    <content type="html"><![CDATA[<p>Python 中的 <code>re.compile()</code> 函数可以「格式化」复杂的正则表达式，从而方便理解。</p>
<p>比如执行 <code>re.compile(r&quot;0\d{2}-\d{8}|0\d{3}-\d{7}&quot;, re.DEBUG)</code> 后得到：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">literal</span> <span class="number">48</span></div><div class="line">branch</div><div class="line">  max_repeat <span class="number">2</span> <span class="number">2</span></div><div class="line">    <span class="keyword">in</span></div><div class="line">      category category_digit</div><div class="line">  <span class="keyword">literal</span> <span class="number">45</span></div><div class="line">  max_repeat <span class="number">8</span> <span class="number">8</span></div><div class="line">    <span class="keyword">in</span></div><div class="line">      category category_digit</div><div class="line"><span class="keyword">or</span></div><div class="line">  max_repeat <span class="number">3</span> <span class="number">3</span></div><div class="line">    <span class="keyword">in</span></div><div class="line">      category category_digit</div><div class="line">  <span class="keyword">literal</span> <span class="number">45</span></div><div class="line">  max_repeat <span class="number">7</span> <span class="number">7</span></div><div class="line">    <span class="keyword">in</span></div><div class="line">      category category_digit</div></pre></td></tr></table></figure>

<p>但是像 <code>literal 48</code> 这句话，还需要我们自己转换一下 ASCII 对应的字符。不妨自己 DIY 一下源码。</p>
<p>将 <code>Lib/sre_parse.py</code> 的 <code>SubPattern</code> 类中的 <code>dump()</code> 函数末尾的 <code>print av, ; nl = 0</code> 修改成</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> av,</div><div class="line"><span class="keyword">if</span> op == <span class="string">"literal"</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"(%s)"</span> % repr(chr(av)),</div><div class="line">nl = <span class="number">0</span></div></pre></td></tr></table></figure>

<p>就可以显示 ASCII 码对应的字符。（10 会以 <code>\n</code> 打印出来）</p>
]]></content>
    <summary type="html">
    <![CDATA[Python 中的 `re.compile()` 函数可以「格式化」复杂的正则表达式，从而方便理解。但是像 `literal 48` 这句话，还需要我们自己转换一下 ASCII 对应的字符。不妨自己 DIY 一下源码。]]>
    
    </summary>
    
      <category term="Python" scheme="http://jianyan.me/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://jianyan.me/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[blog2md 开发小记]]></title>
    <link href="http://jianyan.me/2015/03/09/notes-on-blog2md-development/"/>
    <id>http://jianyan.me/2015/03/09/notes-on-blog2md-development/</id>
    <published>2015-03-09T01:10:00.000Z</published>
    <updated>2015-03-08T14:39:46.000Z</updated>
    <content type="html"><![CDATA[<p>本文项目地址：<a href="https://github.com/EndlessCheng/blog2md" target="_blank" rel="external">https://github.com/EndlessCheng/blog2md</a></p>
<p>首先指出 <code>html2text</code> 的一个 bug：在 <code>html2text\config.py</code> 文件中有这么一行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BODY_WIDTH = <span class="number">78</span></div></pre></td></tr></table></figure>

<p>这会导致转换后的 markdown 中某段文字莫名其妙地被换行，将其修改成</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BODY_WIDTH = <span class="number">0</span></div></pre></td></tr></table></figure>

<p>即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文项目地址：<a href="https://github.com/EndlessCheng/blog2md" target="_blank" rel="external">https://github.com/EndlessCheng/blog2md</a></p>
<]]>
    </summary>
    
      <category term="Python" scheme="http://jianyan.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jianyan.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="markdown" scheme="http://jianyan.me/tags/markdown/"/>
    
      <category term="Beautiful Soup" scheme="http://jianyan.me/tags/Beautiful-Soup/"/>
    
      <category term="html2text" scheme="http://jianyan.me/tags/html2text/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 上传文件到服务器：理论与编码]]></title>
    <link href="http://jianyan.me/2015/02/02/android-file-uploads-to-the-django-server-theory-and-coding/"/>
    <id>http://jianyan.me/2015/02/02/android-file-uploads-to-the-django-server-theory-and-coding/</id>
    <published>2015-02-01T20:10:00.000Z</published>
    <updated>2015-02-02T04:29:20.000Z</updated>
    <content type="html"><![CDATA[<p>本文源码地址：<a href="https://github.com/EndlessCheng/AndroidUploadImages" target="_blank" rel="external">https://github.com/EndlessCheng/AndroidUploadImages</a></p>
<h1 id="需求">需求</h1>
<p>手机端用户注册完成后，会需要你上传一个本地头像到服务器，本文就是来解决这一问题的。</p>
<p>我们的目标是完成这样一个方法：</p>
<p><code>public int postFileToURL(File file, String mimeType, URL url, String fieldName);</code></p>
<p>其中 <code>mimeType</code> 是文件的互联网媒体类型（见下面图片中的 <code>Content-Type: image/jpeg</code>），<code>fieldName</code> 是 <code>&lt;input&gt;</code> 标签中的 <code>name</code> 值。</p>
<p>返回的有上传成功（0）、上传失败（-1）和文件不存在（-2）。</p>
<h1 id="理论">理论</h1>
<p>由于标准的 Android API 没有提供一个明显直接的向服务器上传文件的方法，所以还需手动设置一些 HTTP header 字段。我们先来学习下相关知识。</p>
<p>首先在服务器端做个实验：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>选择一个文件<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"docfile"</span> <span class="attribute">type</span>=<span class="value">"file"</span>/&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"上传"</span>/&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></div></pre></td></tr></table></figure>

<p>打开开发者工具，切换至「网络」，然后点击上传按钮，查看 POST 信息：</p>
<p><img src="http://endless.qiniudn.com/blogupload-file.png" alt=""></p>
<p>注意三个地方：</p>
<ol>
<li><p>由于上传文件可能会比较大，网速可能会比较慢，故采用 <code>Connection: keep-alive</code>，使客户端到服务器端的连接持续有效，避免重新建立连接。</p>
</li>
<li><p><code>Content-Type: multipart/form-data; boundary=--balabala</code> 是上传文件必须的属性</p>
</li>
<li><p>multipart/form-data 的请求体也是一个字符串，不过和 post 的请求体不同的是它的构造方式，post 是简单的 name=value 值连接，multipart/form-data 则是添加了分隔符等内容的构造体。具体格式如下：</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--${bound}</span></div><div class="line">Content-Disposition: form-data; name=<span class="string">"field-name"</span>; filename=<span class="string">"img.jpg"</span></div><div class="line">Content-<span class="keyword">Type</span>: image/jpeg</div><div class="line"></div><div class="line"><span class="keyword">file</span> content</div><div class="line"><span class="comment">--${bound}</span></div><div class="line">Content-Disposition: form-data; name=<span class="string">"field-name2"</span>; filename=<span class="string">"img2.jpg"</span></div><div class="line">Content-<span class="keyword">Type</span>: image/jpeg</div><div class="line"></div><div class="line"><span class="keyword">file</span> content</div><div class="line"><span class="comment">--${bound}--</span></div></pre></td></tr></table></figure>

<p>注意最后的两个连字符号。</p>
<p>参考：</p>
<ol>
<li><a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields" target="_blank" rel="external">List of HTTP header fields</a> </li>
<li><a href="https://www.byvoid.com/blog/http-keep-alive-header" target="_blank" rel="external">HTTP协议头部与Keep-Alive模式详解</a> &lt;- byvoid 博客的好文之一</li>
<li><a href="http://blog.csdn.net/five3/article/details/7181521" target="_blank" rel="external">HTTP协议之multipart/form-data请求分析</a></li>
<li><a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html#sec7.2.1" target="_blank" rel="external">RFC 1341 7.2.1 节</a> 中有这样一段话：「The boundary must be followed immediately either by another CRLF and the header fields for the next part, or by two CRLFs, in which case there are no header fields for the next part (and it is therefore assumed to be of Content-Type text/plain).」即再加一个换行的目的是界定请求头的末尾。</li>
</ol>
<h1 id="编码">编码</h1>
<h2 id="选择文件">选择文件</h2>
<p>首先图片不能过大，限制在 1 Mb 内最好，这个在选择图片的时候就应该处理一下。</p>
<figure class="highlight java"><figcaption><span>onClick()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setType(<span class="string">"image/*"</span>);</div><div class="line">intent.setAction(Intent.ACTION_GET_CONTENT); <span class="comment">// 返回文件 Uri</span></div><div class="line">startActivityForResult(intent, RESULT_CANCELED);</div></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span>(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data) {</div><div class="line">	<span class="keyword">if</span> (resultCode == Activity.RESULT_OK) {</div><div class="line">		Uri uri = data.getData();</div><div class="line">		String path = convertUriToPath(uri);</div><div class="line">		<span class="keyword">if</span> (!isImageFileExtension(MimeTypeMap.getFileExtensionFromUrl(path))) {</div><div class="line">			alert(<span class="string">"不是有效的图片文件！"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			Bitmap bitmap = BitmapFactory.decodeStream(<span class="keyword">this</span></div><div class="line">					.getContentResolver().openInputStream(uri));</div><div class="line">			<span class="keyword">if</span> (bitmap.getByteCount() &gt; MAX_FILE_SIZE) { <span class="comment">// 1024 * 1024</span></div><div class="line">				alert(<span class="string">"图片文件过大！"</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			}</div><div class="line">			mImageView.setImageBitmap(bitmap);</div><div class="line">			mPicturePath = path;</div><div class="line">		} <span class="keyword">catch</span> (FileNotFoundException e) {</div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>onActivityResult()</code> 内的几个方法见源码，此不累述。</p>
<h2 id="上传文件">上传文件</h2>
<figure class="highlight java"><figcaption><span>onClick()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mPicturePath == <span class="keyword">null</span>) {</div><div class="line">	alert(<span class="string">"请选择文件！"</span>);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">}</div><div class="line">String mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(</div><div class="line">				MimeTypeMap.getFileExtensionFromUrl(mPicturePath));</div><div class="line"><span class="keyword">new</span> UploadFileTask(<span class="keyword">this</span>).execute(mPicturePath, mimeType, REQUEST_URL, FIELD_NAME);</div></pre></td></tr></table></figure>

<p>我们的目标方法来了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">postFileToURL</span>(File file, String mimeType, URL url, String fieldName) {</div><div class="line">	<span class="keyword">if</span> (file == <span class="keyword">null</span>) <span class="comment">// 再判断一次，因为可能在选择图片之后，该图片在上传之前被删除</span></div><div class="line">		<span class="keyword">return</span> FILE_NOT_EXIST; <span class="comment">// -2</span></div><div class="line">	<span class="keyword">try</span> {</div><div class="line">		String boundary = UUID.randomUUID().toString();</div><div class="line">		HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">		</div><div class="line">		setHttpURLConnection(conn, boundary);</div><div class="line">		writeData(conn, boundary, file, mimeType, fieldName);</div><div class="line"></div><div class="line">		<span class="keyword">int</span> res = conn.getResponseCode();</div><div class="line">		<span class="keyword">if</span> (res == <span class="number">200</span>)</div><div class="line">			<span class="keyword">return</span> SUCCESS; <span class="comment">// 0</span></div><div class="line">	} <span class="keyword">catch</span> (IOException e) {</div><div class="line">		e.printStackTrace();</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> FAILURE; <span class="comment">// -1</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHttpURLConnection</span>(HttpURLConnection conn,</div><div class="line">		String boundary) {</div><div class="line">	conn.setConnectTimeout(TIME_OUT); <span class="comment">// 30 * 1000 ms</span></div><div class="line">	conn.setReadTimeout(TIME_OUT);</div><div class="line"></div><div class="line">	conn.setDoInput(<span class="keyword">true</span>); <span class="comment">// 允许输入流</span></div><div class="line">	conn.setDoOutput(<span class="keyword">true</span>); <span class="comment">// 允许输出流</span></div><div class="line"></div><div class="line">	<span class="keyword">try</span> {</div><div class="line">		conn.setRequestMethod(<span class="string">"POST"</span>);</div><div class="line">	} <span class="keyword">catch</span> (ProtocolException e) {</div><div class="line">		e.printStackTrace();</div><div class="line">	}</div><div class="line">	conn.setRequestProperty(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>);</div><div class="line">	conn.setRequestProperty(<span class="string">"Content-Type"</span>, CONTENT_TYPE + <span class="string">"; boundary="</span></div><div class="line">			+ boundary);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeData</span>(HttpURLConnection conn, String boundary,</div><div class="line">		File file, String mimeType, String fieldName) <span class="keyword">throws</span> IOException {</div><div class="line">	DataOutputStream requestData = <span class="keyword">new</span> DataOutputStream(</div><div class="line">			conn.getOutputStream());</div><div class="line"></div><div class="line">	requestData.writeBytes(<span class="string">"--"</span> + boundary + CRLF); <span class="comment">// CRLF = "\r\n"</span></div><div class="line">	requestData.writeBytes(<span class="string">"Content-Disposition: form-data; name=\""</span></div><div class="line">			+ fieldName + <span class="string">"\"; filename=\""</span> + file.getName() + <span class="string">"\""</span> + CRLF);</div><div class="line">	requestData.writeBytes(<span class="string">"Content-Type: "</span> + mimeType + CRLF + CRLF); <span class="comment">// 两个回车换行</span></div><div class="line"></div><div class="line">	InputStream fileInput = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">	<span class="keyword">int</span> bytesRead;</div><div class="line">	<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">	<span class="keyword">while</span> ((bytesRead = fileInput.read(buffer)) != -<span class="number">1</span>) {</div><div class="line">		requestData.write(buffer, <span class="number">0</span>, bytesRead);</div><div class="line">	}</div><div class="line">	fileInput.close();</div><div class="line">	requestData.writeBytes(CRLF);</div><div class="line"></div><div class="line">	requestData.writeBytes(<span class="string">"--"</span> + boundary + <span class="string">"--"</span> + CRLF);</div><div class="line">	requestData.flush();</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="Django_上的处理">Django 上的处理</h1>
<p>为了方便手机端的上传，还需要在 <code>view.py</code> 的函数定义前加上 <code>@csrf_exempt</code>：</p>
<figure class="highlight python"><figcaption><span>view.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</div><div class="line">...</div><div class="line"><span class="decorator">@csrf_exempt</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">(request)</span>:</span></div><div class="line">	...</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[手机端用户注册完成后，会需要你上传一个头像到服务器，本文就是来解决这一问题的。（内附 GitHub 源码地址）]]>
    
    </summary>
    
      <category term="Android" scheme="http://jianyan.me/tags/Android/"/>
    
      <category term="Django" scheme="http://jianyan.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[访问网页的过程——常见网络传输协议汇总]]></title>
    <link href="http://jianyan.me/2015/01/13/access-pages-common-network-transport-protocol-summary/"/>
    <id>http://jianyan.me/2015/01/13/access-pages-common-network-transport-protocol-summary/</id>
    <published>2015-01-13T10:10:00.000Z</published>
    <updated>2015-01-13T10:09:22.000Z</updated>
    <content type="html"><![CDATA[<p>计网学完了，整理下。</p>
<ol>
<li><p>解析输入的 URL，找出其中的域名。</p>
</li>
<li><p>将域名通过 UDP 协议发送给域名服务器（DNS），通过逐层查找获得域名对应的 IP 地址，返回给用户主机。</p>
</li>
<li><p>通过三次握手协议建立起用户主机与目标主机的 TCP 连接。</p>
</li>
<li><p>用户的请求消息包括请求路径，文件名等信息，给消息加上 HTTP 头，递交给传输层。</p>
</li>
<li><p>传输层为请求消息加上 TCP 头，包括源与目标端口号，传输序列号等信息，如果请求消息过长还需要对其进行分段，将加过头部的消息交给网络层。</p>
</li>
<li><p>网络层给消息添加 IP 头组成分组（IP 头包括源与目标 IP 地址、分段信息、控制信息等内容），并将这些分组交给数据链路层。</p>
</li>
<li><p>用户主机检测 ARP 缓存表，看有没有关于目标主机的 MAC 地址信息，如有没有的话通过代理 ARP 协议获取。</p>
</li>
<li><p>给分组加上 LLC 头，在 MAC 子层中给帧添加 MAC 头与尾成帧，添加源于目的 MAC 地址，校验信息等内容，帧与帧之间添加分隔自断后交给物理层存储。</p>
</li>
<li><p>数据链路层通过某种协议（如 CSMA/CD）控制帧的传送，将这些帧在子网广播。</p>
</li>
<li><p>子网路由器获取这些帧后检查目标 MAC 地址，发现与自身 MAC 地址相同，将其接收，去掉帧头和尾将剥离出的分组递交至网络层，网络层通过分析 IP 头获取目标 IP 地址并在路由表中进行检索，选择一条合适的输出线路，把分组重新交给数据链路层按照新的 MAC 地址进行封装成帧，通过某种协议（如 PPP）把帧发送给下一个路由器。</p>
</li>
<li><p>经过一次货多次的重复路由过程，这些帧到达目标主机所在子网路由器。</p>
</li>
<li><p>子网路由器通过 ARP 协议获取目标主机的 MAC 地址，利用这个地址将分组重新封装成帧传至目标主机。</p>
</li>
<li><p>目标主机将截取的比特流按照帧分隔字段截取成帧，把去掉 MAC 头尾，LLC 头的分组向上递交给网络层，网络层剥去 IP 头将消息递交至传输层，传输层去掉 TCP 头将消息递交给应用层。 </p>
</li>
<li><p>应用层通过分析 HTTP 请求消息生成应答，以相同的方式把应答信息传送给用户主机的应用层，通过三次握手协议释放 TCP 连接。</p>
</li>
<li><p>浏览器解释应答信息进行显示。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[1. 解析输入的 URL，找出其中的域名。2. 将域名通过 UDP 协议发送给域名服务器（DNS），通过逐层查找获得域名对应的 IP 地址，返回给用户主机。]]>
    
    </summary>
    
      <category term="网络传输协议" scheme="http://jianyan.me/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 SAE 上正确地设置 Django 静态文件]]></title>
    <link href="http://jianyan.me/2014/12/29/how-to-properly-configure-the-django-static-files-on-sae/"/>
    <id>http://jianyan.me/2014/12/29/how-to-properly-configure-the-django-static-files-on-sae/</id>
    <published>2014-12-29T11:00:00.000Z</published>
    <updated>2015-01-28T06:56:21.000Z</updated>
    <content type="html"><![CDATA[<p>1.目录结构如下：（请无视 <code>.idea</code> 文件夹）</p>
<p><img src="http://endless.qiniudn.com/blogsae-django-static.png" alt=""></p>
<p>2.<code>config.yaml</code> 只需要两行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">libraries:</div><div class="line">- <span class="property">name</span>: <span class="string">"django"</span></div><div class="line">  <span class="property">version</span>: <span class="string">"1.5"</span></div></pre></td></tr></table></figure>

<p>3.<code>settings.py</code> 里面这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">STATIC_ROOT = <span class="string">''</span></div><div class="line"></div><div class="line">STATIC_URL = <span class="string">'/static/'</span></div><div class="line"></div><div class="line">STATICFILES_DIRS = (</div><div class="line">    os.path.join(<span class="string">'static'</span>),</div><div class="line">)</div></pre></td></tr></table></figure>

<p>4.<code>urls.py</code> 只需要加上你的 view 就行。</p>
<p>5.模板里面这样写：</p>
<p><img src="http://endless.qiniudn.com/blogsae-django-static2.png" alt=""></p>
<p>搞定。</p>
<p>PS：<code>USE_TZ</code> 要设置成 <code>False</code> ，否则插入时间到数据库的时候会变成 UTC 时间而不是北京时间。</p>
<p>参考资料：</p>
<ol>
<li><a href="https://docs.djangoproject.com/en/dev/howto/static-files/" target="_blank" rel="external">Managing static files (CSS, images)</a></li>
<li><a href="https://docs.djangoproject.com/en/1.5/ref/contrib/staticfiles/" target="_blank" rel="external">The staticfiles app</a></li>
<li><a href="https://docs.djangoproject.com/en/1.5/ref/settings/" target="_blank" rel="external">Settings Documentation</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[只需要加几行字。]]>
    
    </summary>
    
      <category term="Django" scheme="http://jianyan.me/tags/Django/"/>
    
      <category term="SAE" scheme="http://jianyan.me/tags/SAE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pillow 模块小记：在图片上添加文字]]></title>
    <link href="http://jianyan.me/2014/12/09/notes-of-the-pillow-moudle-adding-text-on-the-picture/"/>
    <id>http://jianyan.me/2014/12/09/notes-of-the-pillow-moudle-adding-text-on-the-picture/</id>
    <published>2014-12-09T09:00:00.000Z</published>
    <updated>2014-12-09T08:57:55.000Z</updated>
    <content type="html"><![CDATA[<p>首先 <code>pip install Pillow</code> 安装 Pillow 模块。（这名字挺萌的）</p>
<p>直接上代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</div><div class="line"></div><div class="line">PIC_URL = <span class="string">"http://pic1.zhimg.com/3676e9bd6_l.jpg"</span></div><div class="line">DRAW_WORD = <span class="string">u"①"</span></div><div class="line">TRANSPARENT = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>)</div><div class="line">SOFT_RED = (<span class="number">243</span>, <span class="number">90</span>, <span class="number">74</span>, <span class="number">255</span>)</div><div class="line"></div><div class="line">rsp = urllib.urlopen(PIC_URL)</div><div class="line">data = rsp.read()</div><div class="line"></div><div class="line">fp = BytesIO()</div><div class="line">fp.write(data)</div><div class="line">fp.seek(<span class="number">0</span>, <span class="number">0</span>)</div><div class="line">base_image = Image.open(fp).convert(<span class="string">'RGBA'</span>)</div><div class="line"></div><div class="line">fnt = ImageFont.truetype(<span class="string">'CALIBRI.TTF'</span>, base_image.size[<span class="number">0</span>] / <span class="number">4</span>)  <span class="comment"># FreeTypeFont</span></div><div class="line">fnt_size = fnt.getsize(DRAW_WORD)</div><div class="line"></div><div class="line">txt_image = Image.new(<span class="string">'RGBA'</span>, base_image.size, TRANSPARENT)</div><div class="line">ImageDraw.Draw(txt_image).text((base_image.size[<span class="number">0</span>] - fnt_size[<span class="number">0</span>], <span class="number">10</span>), DRAW_WORD, fill=SOFT_RED, font=fnt)</div><div class="line"></div><div class="line">out = Image.alpha_composite(base_image, txt_image)</div><div class="line">out.show()</div></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="http://endless.qiniudn.com/blogpillow.bmp" alt=""></p>
<p>参考资料：</p>
<ol>
<li>图片来自 <a href="http://zhuanlan.zhihu.com/zhihu-product" target="_blank" rel="external">知乎</a></li>
<li><a href="http://en.wikipedia.org/wiki/RGBA_color_space" target="_blank" rel="external">RGBA color space</a></li>
<li><a href="https://github.com/Show-Me-the-Code/show-me-the-code" target="_blank" rel="external">Python 练习册，每天一个小程序</a></li>
</ol>
<p>附上最近发现的一个好网站：<a href="https://color.adobe.com/zh/explore/most-popular/?time=all" target="_blank" rel="external">Adobe Color CC</a></p>
]]></content>
    <summary type="html">
    <![CDATA[1. 图片来自 [知乎](http://zhuanlan.zhihu.com/zhihu-product) 2. 颜色参考了 [Adobe Color CC](https://color.adobe.com/zh/explore/most-popular/?time=all) 3. [RGBA color space](http://en.wikipedia.org/wiki/RGBA_color_space) 4. [Python 练习册，每天一个小程序](https://github.com/Show-Me-the-Code/show-me-the-code)]]>
    
    </summary>
    
      <category term="Pillow" scheme="http://jianyan.me/tags/Pillow/"/>
    
      <category term="PIL" scheme="http://jianyan.me/tags/PIL/"/>
    
      <category term="Python" scheme="http://jianyan.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何写一个无 bug 的 min/max 宏？]]></title>
    <link href="http://jianyan.me/2014/11/01/how-to-write-a-bug-free-min-max-macro/"/>
    <id>http://jianyan.me/2014/11/01/how-to-write-a-bug-free-min-max-macro/</id>
    <published>2014-11-01T13:30:00.000Z</published>
    <updated>2014-12-09T08:42:17.000Z</updated>
    <content type="html"><![CDATA[<p>今天看了下 GHC 的源码，在 <a href="https://github.com/ghc/ghc/blob/master/includes/Rts.h" target="_blank" rel="external">Rts.h</a> 中，有如下宏定义：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">if</span> defined(SUPPORTS_TYPEOF)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> stg_min(a,b) ({typeof(a) _a = (a), _b = (b); _a &lt;= _b ? _a : _b; })</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> stg_max(a,b) ({typeof(a) _a = (a), _b = (b); _a &lt;= _b ? _b : _a; })</span></div><div class="line"><span class="preprocessor">#<span class="keyword">else</span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> stg_min(a,b) ((a) &lt;= (b) ? (a) : (b))</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> stg_max(a,b) ((a) &lt;= (b) ? (b) : (a))</span></div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p>那么问题来了：为什么不直接定义下面那种宏？<br>原因在于传入的 a,b 可能是一个有副作用的表达式，比如 <code>++a</code>，使用下面这种宏会产生一个及其隐秘的 bug（谁知道哪天程序出错了 bug 会在这里）。<br>个人觉得这真的是一个 GHC 的 bug..<br>替代方案就正如源码中写的，使用 <code>typeof</code>，不过这需要 C 扩展支持。<br>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/3437404/min-and-max-in-c" target="_blank" rel="external">macros - MIN and MAX in C - Stack Overflow</a></li>
<li><a href="https://gcc.gnu.org/onlinedocs/gcc/Typeof.html#Typeof" target="_blank" rel="external">Typeof - Using the GNU Compiler Collection (GCC)</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[今天看了下 GHC 的源码，在 [Rts.h](https://github.com/ghc/ghc/blob/master/includes/Rts.h) 中，有如下宏定义：]]>
    
    </summary>
    
      <category term="C" scheme="http://jianyan.me/tags/C/"/>
    
      <category term="macro" scheme="http://jianyan.me/tags/macro/"/>
    
      <category term="GHC" scheme="http://jianyan.me/tags/GHC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitHub 秘籍]]></title>
    <link href="http://jianyan.me/2014/09/23/github-cheats/"/>
    <id>http://jianyan.me/2014/09/23/github-cheats/</id>
    <published>2014-09-23T13:30:00.000Z</published>
    <updated>2014-12-09T07:54:41.000Z</updated>
    <content type="html"><![CDATA[<p><strong>本文转载自 <a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="external">GitHub</a></strong></p>
<p>本秘籍收录了一些Git和Github非常酷同时又少有人知的功能。灵感来自于<a href="https://github.com/holman" target="_blank" rel="external">Zach Holman</a>在2012年Aloha Ruby Conference和2013年WDCNZ上所做的演讲：<a href="http://www.confreaks.com/videos/1229-aloharuby2012-git-and-github-secrets" target="_blank" rel="external">Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/git-and-github-secrets" target="_blank" rel="external">slides</a>)和<a href="https://vimeo.com/72955426" target="_blank" rel="external">More Git and GitHub Secrets</a>(<a href="https://speakerdeck.com/holman/more-git-and-github-secrets" target="_blank" rel="external">slides</a>)。</p>
<p><em>Read this in other languages: <a href="README.md">English</a>, <a href="README.ko.md">한국어</a>, <a href="README.ja.md">日本語</a>, <a href="README.zh-cn.md">简体中文</a>.</em></p>
<h1 id="目录">目录</h1>
<ul>
<li><a href="#github">GitHub</a><ul>
<li><a href="#%E8%B0%83%E6%95%B4tab%E5%AD%97%E7%AC%A6%E6%89%80%E4%BB%A3%E8%A1%A8%E7%9A%84%E7%A9%BA%E6%A0%BC%E6%95%B0">忽略空白字符变化</a></li>
<li><a href="#%E8%B0%83%E6%95%B4tab%E5%AD%97%E7%AC%A6%E6%89%80%E4%BB%A3%E8%A1%A8%E7%9A%84%E7%A9%BA%E6%A0%BC%E6%95%B0">调整Tab字符所代表的空格数</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84commit%E5%8E%86%E5%8F%B2">查看某个用户的Commit历史</a></li>
<li><a href="#%E5%85%8B%E9%9A%86%E6%9F%90%E4%B8%AA%E4%BB%93%E5%BA%93">克隆某个仓库</a></li>
<li><a href="#%E5%88%86%E6%94%AF">分支</a> <ul>
<li><a href="#%E5%B0%86%E6%9F%90%E4%B8%AA%E5%88%86%E6%94%AF%E4%B8%8E%E5%85%B6%E4%BB%96%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF%E8%BF%9B%E8%A1%8C%E5%AF%B9%E6%AF%94">将某个分支与其他所有分支进行对比</a></li>
<li><a href="#%E6%AF%94%E8%BE%83%E5%88%86%E6%94%AF">比较分支</a></li>
<li><a href="#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%90%8C%E6%B4%BE%E7%94%9F%E5%BA%93%E7%9A%84%E5%88%86%E6%94%AF">比较不同派生库的分支</a></li>
</ul>
</li>
<li><a href="#gists">Gists</a></li>
<li><a href="#gitio">Git.io</a></li>
<li><a href="#%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE">键盘快捷键</a></li>
<li><a href="#%E6%95%B4%E8%A1%8C%E9%AB%98%E4%BA%AE">整行高亮</a></li>
<li><a href="#%E7%94%A8commit%E4%BF%A1%E6%81%AF%E5%85%B3%E9%97%ADissue">用commit信息关闭Issue</a></li>
<li><a href="#%E9%93%BE%E6%8E%A5%E5%85%B6%E4%BB%96%E4%BB%93%E5%BA%93%E7%9A%84issue">链接其他仓库的Issue</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AEci%E5%AF%B9%E6%AF%8F%E6%9D%A1pull-request%E9%83%BD%E8%BF%9B%E8%A1%8C%E6%9E%84%E5%BB%BA">设置CI对每条Pull Request都进行构建</a></li>
<li><a href="#markdown%E6%96%87%E4%BB%B6%E9%AB%98%E4%BA%AE%E8%AF%AD%E6%B3%95">Markdown文件高亮语法</a></li>
<li><a href="#%E8%A1%A8%E6%83%85%E7%AC%A6">表情符</a></li>
<li><a href="#%E9%9D%99%E6%80%81%E4%B8%8E%E5%8A%A8%E6%80%81%E5%9B%BE%E7%89%87">静态与动态图片</a><ul>
<li><a href="#%E5%9C%A8github-wiki%E4%B8%AD%E5%B5%8C%E5%85%A5%E5%9B%BE%E7%89%87">在GitHub Wiki中嵌入图片</a></li>
</ul>
</li>
<li><a href="#%E5%BF%AB%E9%80%9F%E5%BC%95%E7%94%A8">快速引用</a></li>
<li><a href="#%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E8%AE%B8%E5%8F%AF%E8%AF%81">快速添加许可证</a></li>
<li><a href="#%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8">任务列表</a><ul>
<li><a href="#markdown%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8">Markdown文件中的任务列表</a></li>
</ul>
</li>
<li><a href="#%E7%9B%B8%E5%AF%B9%E9%93%BE%E6%8E%A5">相对链接</a></li>
<li><a href="#github-pages%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%8F%92%E4%BB%B6%E6%94%AF%E6%8C%81">GitHub Pages的元数据与插件支持</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8Byaml%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE">查看YAML格式的元数据</a></li>
<li><a href="#%E6%B8%B2%E6%9F%93%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE">渲染表格数据</a></li>
<li><a href="#%E6%92%A4%E9%94%80pull-request">撤销Pull Request</a></li>
<li><a href="#diffs">Diffs</a><ul>
<li><a href="#%E5%8F%AF%E6%B8%B2%E6%9F%93%E6%96%87%E6%A1%A3%E7%9A%84diffs">可渲染文档的Diffs</a></li>
<li><a href="#%E5%8F%AF%E5%8F%98%E5%8C%96%E5%9C%B0%E5%9B%BE">可变化地图</a></li>
<li><a href="#%E5%9C%A8diff%E4%B8%AD%E6%8A%98%E5%8F%A0%E4%B8%8E%E6%89%A9%E5%B1%95%E4%BB%A3%E7%A0%81">在diff中折叠与扩展代码</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8Bpull-request%E7%9A%84diff%E5%92%8Cpatch">查看Pull Request的diff和patch</a></li>
<li><a href="#%E6%B8%B2%E6%9F%93%E5%9B%BE%E5%83%8F%E5%8F%91%E7%94%9F%E7%9A%84%E5%8F%98%E5%8A%A8">渲染图像发生的变动</a></li>
</ul>
</li>
<li><a href="#hub">Hub</a></li>
<li><a href="#%E8%B4%A1%E7%8C%AE%E5%86%85%E5%AE%B9%E7%9A%84%E8%87%AA%E5%8A%A8%E6%A3%80%E6%9F%A5">贡献内容的自动检查</a></li>
<li><a href="#%E8%B4%A1%E7%8C%AE%E8%80%85%E6%8C%87%E5%8D%97">贡献者指南</a></li>
<li><a href="#github%E8%B5%84%E6%BA%90">GitHub资源</a><ul>
<li><a href="#github%E8%AE%A8%E8%AE%BA">GitHub讨论</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#git">Git</a><ul>
<li><a href="#%E5%89%8D%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">前一个分支</a></li>
<li><a href="#stripspace%E5%91%BD%E4%BB%A4">Stripspace命令</a></li>
<li><a href="#%E6%A3%80%E5%87%BApull-requests">检出Pull Requests</a></li>
<li><a href="#%E6%8F%90%E4%BA%A4%E7%A9%BA%E6%94%B9%E5%8A%A8-trollface">提交空改动 :trollface:</a></li>
<li><a href="#%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84git-status">更直观的Git Status</a></li>
<li><a href="#%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84git-log">更直观的Git Log</a></li>
<li><a href="#git%E6%9F%A5%E8%AF%A2">Git查询</a></li>
<li><a href="#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF">合并分支</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E7%BD%91%E9%A1%B5%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93">使用网页查看本地仓库</a></li>
<li><a href="#git%E9%85%8D%E7%BD%AE">Git配置</a><ul>
<li><a href="#git%E5%91%BD%E4%BB%A4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%AB%E5%90%8D">Git命令自定义别名</a></li>
<li><a href="#%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%AD%A3">自动更正</a></li>
<li><a href="#%E5%B8%A6%E9%A2%9C%E8%89%B2%E8%BE%93%E5%87%BA">带颜色输出</a></li>
</ul>
</li>
<li><a href="#git%E8%B5%84%E6%BA%90">Git资源</a><ul>
<li><a href="#git%E5%8F%82%E8%80%83%E4%B9%A6%E7%B1%8D">Git参考书籍</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="GitHub">GitHub</h2>
<h3 id="忽略空白字符变化">忽略空白字符变化</h3>
<p>在任意diff页面的URL后加上<code>?w=1</code>，可以去掉那些只是空白字符的变化，使你能更专注于代码的变化。</p>
<p><img src="https://camo.githubusercontent.com/797184940defadec00393e6559b835358a863eeb/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f776869746573706163652e706e67" alt="Diff without whitespace"></p>
<p><a href="https://github.com/blog/967-github-secrets" target="_blank" rel="external"><em>详见 GitHub secrets.</em></a></p>
<h3 id="调整Tab字符所代表的空格数">调整Tab字符所代表的空格数</h3>
<p>在diff或者file页面的URL后面加上<code>?ts=4</code>，这样当显示tab字符的长度时就会是4个空格的长度，不再是默认的8个空格。<code>ts</code>后面的数字还可以根据你个人的偏好进行修改。不过，这个小诀窍在Gists页面和raw file页面不起作用。</p>
<p>下面是我们在Go语言的source file页面URL后加<code>?ts=4</code><a href="https://github.com/pengwynn/flint/blob/master/flint/flint.go" target="_blank" rel="external">前</a>的例子：</p>
<p><img src="http://i.imgur.com/GIT1Fr0.png" alt="Before, tab space example"></p>
<p>然后是我们添加<code>?ts=4</code><a href="https://github.com/pengwynn/flint/blob/master/flint/flint.go?ts=4" target="_blank" rel="external">后</a>的例子：</p>
<p><img src="http://i.imgur.com/70FL4H9.png" alt="After, tab space example"></p>
<h3 id="查看某个用户的Commit历史">查看某个用户的Commit历史</h3>
<p>查看某个用户的所有提交历史，只需在commits页面URL后加上<code>?author=username</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rails/rails/commits/master?author=dhh</div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/mDWwuaY.png" alt="DHH commit history"></p>
<p><a href="https://help.github.com/articles/differences-between-commit-views" target="_blank" rel="external"><em>深入了解提交视图之间的区别</em></a></p>
<h3 id="克隆某个仓库">克隆某个仓库</h3>
<p>当我们克隆某一资源时，可以不要那个<code>.git</code>后缀。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/tiimgreen/github-cheat-sheet</div></pre></td></tr></table></figure>

<p><a href="http://git-scm.com/docs/git-clone" target="_blank" rel="external"><em>更多对 Git <code>clone</code> 命令的介绍.</em></a></p>
<h3 id="分支">分支</h3>
<h4 id="将某个分支与其他所有分支进行对比">将某个分支与其他所有分支进行对比</h4>
<p>当你点击某个仓库的分支（Branches）选项卡时</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/<span class="list">{user}</span>/<span class="list">{repo}</span>/branches</div></pre></td></tr></table></figure>

<p>你会看到一个包含所有未合并的分支的列表。</p>
<p>你可以在这里查看比较（Compare）页面或点击删除某个分支。</p>
<p><img src="http://i.imgur.com/gKWPe8a.png" alt="Compare branches not merged into master in jquery/jquery repo - https://github.com/jquery/jquery/branches"></p>
<p>有的时候我们需要将多个分支与一个非主分支（master）进行对比，此时可以通过在URL后加入要比较的分支名来实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/<span class="list">{user}</span>/<span class="list">{repo}</span>/branches/<span class="list">{branch}</span></div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/jpc6Urb.png" alt="Compare branches not merged into `1.x-master` in jquery/jquery repo - https://github.com/jquery/jquery/branches/1.x-master"></p>
<p>可以在URL后加上<code>?merged=1</code>来查看已经合并了的分支。</p>
<p><img src="http://i.imgur.com/KmYyCVh.png" alt="Compare branches merged in to `1.x-master` in jquery/jquery repo - https://github.com/jquery/jquery/branches/1.x-master?merged=1"></p>
<p>你可以使用这个界面来替代命令行直接删除分支。</p>
<h4 id="比较分支">比较分支</h4>
<p>如果我们想要比较两个分支，可以像下面一样修改URL：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/user</span><span class="regexp">/repo/compare</span><span class="regexp">/{range}</span></div></pre></td></tr></table></figure>

<p>其中<code>{range} = master...4-1-stable</code></p>
<p>例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rails/rails/compare/master...<span class="number">4</span>-<span class="number">1</span>-stable</div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/0Z52X5Y.png" alt="Rails branch compare example"></p>
<p><code>{range}</code>还可以使用下面的形式:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//github.com/rails/rails/compare/master@{1.day.ago}...master</span></div><div class="line">https:<span class="comment">//github.com/rails/rails/compare/master@{2014-10-04}...master</span></div></pre></td></tr></table></figure>

<p><em>日期格式 <code>YYYY-DD-MM</code></em></p>
<p><img src="http://i.imgur.com/5dtzESz.png" alt="Another compare example"></p>
<p>…这样你就能查看master分支上一段时间或者指定日期内的改动。</p>
<p><a href="https://help.github.com/articles/comparing-commits-across-time" target="_blank" rel="external"><em>了解更多关于比较跨时间段的提交记录.</em></a></p>
<h4 id="比较不同派生库的分支">比较不同派生库的分支</h4>
<p>想要对派生仓库（Forked Repository）之间的分支进行比较，可以像下面这样修改URL实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/user/repo/compare/{foreign-user}:{branch}<span class="keyword">...</span>{own-branch}</div></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rails/rails/compare/byroo<span class="variable">t:master</span>...master</div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/Q1W6qcB.png" alt="Forked branch compare"></p>
<h3 id="Gists">Gists</h3>
<p><a href="https://gist.github.com/" target="_blank" rel="external">Gists</a> 给我们提供了一种不需要创建一个完整的仓库，使小段代码也可以工作的简单方式。</p>
<p><img src="http://i.imgur.com/VkKI1LC.png?1" alt="Gist"></p>
<p>Gist的URL后加上<code>.pibb</code>，可以得到更适合嵌入到其他网站的HTML版本。</p>
<p>Gists还可以像任何标准仓库一样被克隆。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://gist.github.com/tiimgreen/<span class="number">10545817</span></div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/dULZXXo.png" alt="Gists"></p>
<p>This means you can also modify and update Gists:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git commit</div><div class="line">$ Username <span class="keyword">for</span> <span class="string">'https://gist.github.com'</span>: </div><div class="line">$ Password <span class="keyword">for</span> <span class="string">'https://tiimgreen@gist.github.com'</span>:</div></pre></td></tr></table></figure>

<p><a href="https://help.github.com/articles/creating-gists" target="_blank" rel="external"><em>进一步了解如何创建 gists.</em></a></p>
<h3 id="Git-io">Git.io</h3>
<p><a href="http://git.io" target="_blank" rel="external">Git.io</a>是Github的短网址服务。</p>
<p><img src="http://i.imgur.com/6JUfbcG.png?1" alt="Git.io"></p>
<p>你可以通过Curl命令以普通HTTP协议使用它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ curl -i http://git.io -F <span class="string">"url=https://github.com/..."</span></div><div class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</div><div class="line">Location: http://git.io/abc123</div><div class="line"></div><div class="line">$ curl -i http://git.io/abc123</div><div class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Found</div><div class="line">Location: https://github.com/...</div></pre></td></tr></table></figure>

<p><a href="https://github.com/blog/985-git-io-github-url-shortener" target="_blank" rel="external"><em>进一步了解 Git.io.</em></a></p>
<h3 id="键盘快捷键">键盘快捷键</h3>
<p>在仓库主页上提供了快捷键方便快速导航。</p>
<ul>
<li>按 <code>t</code> 键会打开一个文件浏览器。</li>
<li>按 <code>w</code> 键会打开分支选择菜单。</li>
<li>按 <code>s</code> 键会激活顶端的命令栏  (Command Bar)。</li>
<li>按 <code>l</code> 键编辑Issue列表页的标签。</li>
<li><strong>查看文件内容时</strong>（如：<code>https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md</code>），按 <code>y</code> 键将会冻结这个页面，这样就算代码被修改了也不会影响你当前看到的。</li>
</ul>
<p>按<code>?</code>查看当前页面支持的快捷键列表：</p>
<p><img src="http://i.imgur.com/y5ZfNEm.png" alt="Keyboard shortcuts"></p>
<p><a href="https://help.github.com/articles/using-the-command-bar" target="_blank" rel="external"><em>进一步了解如何使用 Command Bar.</em></a></p>
<h3 id="整行高亮">整行高亮</h3>
<p>在代码文件地址后加上<code>#L52</code>或者单击行号52都会将第52行代码高亮显示。</p>
<p>多行高亮也可以，比如用<code>#L53-L60</code>选择范围，或者按住 <code>shift</code>键，然后再点击选择的两行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/rails</span><span class="regexp">/rails/blob</span><span class="regexp">/master/activemodel</span><span class="regexp">/lib/active</span>_model.rb<span class="comment">#L53-L60</span></div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/8AhjrCz.png" alt="整行高亮"></p>
<h3 id="用commit信息关闭Issue">用commit信息关闭Issue</h3>
<p>如果某个提交修复了一个Issue，当提交到master分支时，提交信息里可以使用<code>fix/fixes/fixed</code>, <code>close/closes/closed</code> 或者 <code>resolve/resolves/resolved</code>等关键词，后面再跟上Issue号，这样就会关闭这个Issue。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Fix screwup, fixes #12"</span></div></pre></td></tr></table></figure>

<p>这将会关闭Issue #12，并且在Issue讨论列表里关联引用这次提交。</p>
<p><img src="http://i.imgur.com/Uh1gZdx.png" alt="Closing Repo"></p>
<p><a href="https://help.github.com/articles/closing-issues-via-commit-messages" target="_blank" rel="external"><em>进一步了解通过提交信息关闭Issue.</em></a></p>
<h3 id="链接其他仓库的Issue">链接其他仓库的Issue</h3>
<p>如果你想引用到同一个仓库中的一个Issue，只需使用井号 <code>#</code> 加上Issue号，这样就会自动创建到此Issue的链接。</p>
<p>要链接到其他仓库的Issue，就使用<code>user_name/repo_name#ISSUE_NUMBER</code>的方式，例如<code>tiimgreen/toc#12</code>。</p>
<p><img src="https://camo.githubusercontent.com/447e39ab8d96b553cadc8d31799100190df230a8/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031312f736563726574732f7265666572656e6365732e706e67" alt="Cross-Link Issues"></p>
<h3 id="设置CI对每条Pull_Request都进行构建">设置CI对每条Pull Request都进行构建</h3>
<p>如果配置正确，<a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a>会为每个你收到的Pull Request执行构建，就像每次提交也会触发构建一样。想了解更多关于Travis CI的信息，请看 <a href="http://docs.travis-ci.com/user/getting-started/" target="_blank" rel="external">Travis CI入门</a>。</p>
<p><a href="https://github.com/octokit/octokit.rb/pull/452" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/1687642/2700187/3a88838c-c410-11e3-9a46-e65e2a0458cd.png" alt="Travis CI status"></a></p>
<p><a href="https://github.com/blog/1227-commit-status-api" target="_blank" rel="external"><em>进一步了解 Commit status API.</em></a></p>
<h3 id="Markdown文件高亮语法">Markdown文件高亮语法</h3>
<p>例如，可以像下面这样在你的Markdown文件里为Ruby代码添加语法高亮：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></div><div class="line">table = <span class="constant">Tabbit</span>.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</div><div class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</div><div class="line">puts table.to_s</div></pre></td></tr></table></figure>

<p>效果像下面这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'tabbit'</span></div><div class="line">table = <span class="constant">Tabbit</span>.new(<span class="string">'Name'</span>, <span class="string">'Email'</span>)</div><div class="line">table.add_row(<span class="string">'Tim Green'</span>, <span class="string">'tiimgreen@gmail.com'</span>)</div><div class="line">puts table.to_s</div></pre></td></tr></table></figure>

<p>Github使用 <a href="https://github.com/github/linguist" target="_blank" rel="external">Linguist</a> 做语言识别和语法高亮。你可以仔细阅读 <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="external">languages YAML file</a>，了解有哪些可用的关键字。</p>
<p><a href="https://help.github.com/articles/github-flavored-markdown" target="_blank" rel="external"><em>进一步了解 GitHub Flavored Markdown.</em></a></p>
<h3 id="表情符">表情符</h3>
<p>可以在Pull Requests, Issues, 提交消息, Markdown文件里加入表情符。使用方法<code>:name_of_emoji:</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">:smile</span><span class="symbol">:</span></div></pre></td></tr></table></figure>

<p>将输出一个笑脸：</p>
<p>:smile:</p>
<p>Github支持的完整表情符号列表详见<a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">emoji-cheat-sheet.com</a> 或 <a href="https://github.com/scotch-io/All-Github-Emoji-Icons" target="_blank" rel="external">scotch-io/All-Github-Emoji-Icons</a>。</p>
<p>Github上使用最多的5个表情符号是：</p>
<ol>
<li>:shipit: - <code>:shipit:</code></li>
<li>:sparkles: - <code>:sparkles:</code></li>
<li>:-1: - <code>:-1:</code></li>
<li>:+1: - <code>:+1:</code></li>
<li>:clap: - <code>:clap:</code></li>
</ol>
<h3 id="静态与动态图片">静态与动态图片</h3>
<p>注释和README等文件里也可以使用图片和GIF动画：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Alt Text</span>](<span class="link_url">http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif</span>)</div></pre></td></tr></table></figure>

<p>仓库中的原始图片可以被直接调用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Alt Text</span>](<span class="link_url">https://github.com/(user</span>)/(repo)/raw/master/path/to/image.gif)</div></pre></td></tr></table></figure>

<p><img src="http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif" alt="Peter don&#39;t care"></p>
<p>所有图片都缓存在Gitub，不用担心你的站点不能访问时就看不到图片了。</p>
<h4 id="在GitHub_Wiki中嵌入图片">在GitHub Wiki中嵌入图片</h4>
<p>有多种方法可以在Wiki页面里嵌入图片。既可以像上一条里那样使用标准的Markdown语法，也可以像下面这样指定图片的高度或宽度：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]</div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="http://i.imgur.com/J5bMf7S.png" alt="Just a screenshot"></p>
<h3 id="快速引用">快速引用</h3>
<p>在注释话题里引用之前某个人所说的，只需选中文本，然后按 <code>r</code>键，想要的就会以引用的形式复制到你的输入框里。</p>
<p><img src="https://f.cloud.github.com/assets/296432/124483/b0fa6204-6ef0-11e2-83c3-256c37fa7abc.gif" alt="Quick Quote"></p>
<p><a href="https://github.com/blog/1399-quick-quotes" target="_blank" rel="external"><em>进一步了解快速引用.</em></a></p>
<h3 id="快速添加许可证">快速添加许可证</h3>
<p>创建一个仓库时，Github会为你提供一个预置的软件许可列表：</p>
<p><img src="http://i.imgur.com/Chqj4Fg.png" alt="License"></p>
<p>对于已有的仓库，可以通过web界面创建文件来添加软件许可。输入<code>LICENSE</code>作为文件名后，同样可以从预置的列表中选择一个作为模板。</p>
<p><img src="http://i.imgur.com/fTjQict.png" alt="License"></p>
<p>这个技巧也适用于 <code>.gitignore</code> 文件。</p>
<p><a href="https://help.github.com/articles/open-source-licensing" target="_blank" rel="external"><em>进一步了解 open source licensing.</em></a></p>
<h3 id="任务列表">任务列表</h3>
<p>Issues和Pull requests里可以添加复选框，语法如下（注意空白符）：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> [ ] <span class="constant">Be</span> awesome</span></div><div class="line">-<span class="ruby"> [ ] <span class="constant">Prepare</span> dinner</span></div><div class="line">  -<span class="ruby"> [ ] <span class="constant">Research</span> recipe</span></div><div class="line">  -<span class="ruby"> [ ] <span class="constant">Buy</span> ingredients</span></div><div class="line">  -<span class="ruby"> [ ] <span class="constant">Cook</span> recipe</span></div><div class="line">-<span class="ruby"> [ ] <span class="constant">Sleep</span></span></div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/jJBXhsY.png" alt="Task List"></p>
<p>当项目被选中时，它对应的Markdown源码也被更新了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> [x] <span class="constant">Be</span> awesome</span></div><div class="line">-<span class="ruby"> [ ] <span class="constant">Prepare</span> dinner</span></div><div class="line">  -<span class="ruby"> [x] <span class="constant">Research</span> recipe</span></div><div class="line">  -<span class="ruby"> [x] <span class="constant">Buy</span> ingredients</span></div><div class="line">  -<span class="ruby"> [ ] <span class="constant">Cook</span> recipe</span></div><div class="line">-<span class="ruby"> [ ] <span class="constant">Sleep</span></span></div></pre></td></tr></table></figure>

<p><a href="https://help.github.com/articles/writing-on-github#task-lists" target="_blank" rel="external"><em>进一步了解任务列表.</em></a></p>
<h4 id="Markdown文件中的任务列表">Markdown文件中的任务列表</h4>
<p>在完全适配Markdown语法的文件中可以使用以下语法加入一个<strong>只读</strong>的任务列表</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> [ ] <span class="constant">Mercury</span></span></div><div class="line">-<span class="ruby"> [x] <span class="constant">Venus</span></span></div><div class="line">-<span class="ruby"> [x] <span class="constant">Earth</span></span></div><div class="line">  -<span class="ruby"> [x] <span class="constant">Moon</span></span></div><div class="line">-<span class="ruby"> [x] <span class="constant">Mars</span></span></div><div class="line">  -<span class="ruby"> [ ] <span class="constant">Deimos</span></span></div><div class="line">  -<span class="ruby"> [ ] <span class="constant">Phobos</span></span></div></pre></td></tr></table></figure>

<ul>
<li>[ ] Mercury</li>
<li>[x] Venus</li>
<li>[x] Earth<ul>
<li>[x] Moon</li>
</ul>
</li>
<li>[x] Mars<ul>
<li>[ ] Deimos</li>
<li>[ ] Phobos</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/blog/1825-task-lists-in-all-markdown-documents" target="_blank" rel="external"><em>进一步了解Markdown文件中的任务列表</em></a></p>
<h3 id="相对链接">相对链接</h3>
<p>Markdown文件里链接到内部内容时推荐使用相对链接。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="link_label">Link to a header</span>](<span class="link_url">#awesome-section</span>)</div><div class="line">[<span class="link_label">Link to a file</span>](<span class="link_url">docs/readme</span>)</div></pre></td></tr></table></figure>

<p>绝对链接会在URL改变时（例如重命名仓库、用户名改变，建立分支项目）被更新。使用相对链接能够保证你的文档不受此影响。</p>
<p><a href="https://help.github.com/articles/relative-links-in-readmes" target="_blank" rel="external"><em>进一步了解相对链接.</em></a></p>
<h3 id="GitHub_Pages的元数据与插件支持">GitHub Pages的元数据与插件支持</h3>
<p>在Jekyll页面和文章里，仓库信息可在 <code>site.github</code> 命名空间下找到，也可以显示出来，例如，使用 ``显示项目标题。</p>
<p>Jemoji和jekyll-mentions插件为你的Jekyll文章和页面增加了<a href="#emojis">emoji</a>和<a href="https://github.com/blog/821" target="_blank" rel="external">@mentions</a>功能。</p>
<p><a href="https://github.com/blog/1797-repository-metadata-and-plugin-support-for-github-pages" target="_blank" rel="external"><em>了解更多 GitHub Pages的元数据和插件支持.</em></a></p>
<h3 id="查看YAML格式的元数据">查看YAML格式的元数据</h3>
<p>许多博客站点，比如基于<a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a>的<a href="http://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，都依赖于一些文章头部的YAML格式的元数据。Github会将其渲染成一个水平表格，方便阅读。</p>
<p><img src="https://camo.githubusercontent.com/47245aa16728e242f74a9a324ce0d24c0b916075/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f36343035302f313232383236372f65303439643063362d323761302d313165332d396464382d6131636432323539393334342e706e67" alt="YAML metadata"></p>
<p><a href="https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents" target="_blank" rel="external"><em>进一步了解 在文档里查看YAML元数据.</em></a></p>
<h3 id="渲染表格数据">渲染表格数据</h3>
<p>GitHub支持将 <code>.csv</code> (comma分隔)和<code>.tsv</code> (tab分隔)格式的文件渲染成表格数据。</p>
<p><img src="https://camo.githubusercontent.com/1b6dd0157ffb45d9939abf14233a0cb13b3b4dfe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3238323735392f3937363436322f33323038336463652d303638642d313165332d393262322d3566323863313061353035392e706e67" alt="Tabular data"></p>
<p><a href="https://github.com/blog/1601-see-your-csvs" target="_blank" rel="external"><em>进一步了解渲染表格数据.</em></a></p>
<h3 id="撤销Pull_Request">撤销Pull Request</h3>
<p>可以通过Pull Request中的Revert按钮来撤销一个已合并的Pull Request中的commit。按下按钮后会自动生成一个进行逆向操作的Pull Request。</p>
<p><img src="https://camo.githubusercontent.com/0d3350caf2bb1cba53123ffeafc00ca702b1b164/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f68656c702f70756c6c5f72657175657374732f7265766572742d70756c6c2d726571756573742d6c696e6b2e706e67" alt="Revert button"></p>
<p><a href="https://github.com/blog/1857-introducing-the-revert-button" target="_blank" rel="external">*进一步了解“撤销”按钮</a></p>
<h3 id="Diffs">Diffs</h3>
<h4 id="可渲染文档的Diffs">可渲染文档的Diffs</h4>
<p>提交和Pull Requests里包含有Github支持的可渲染文档（比如Markdown）会提供<em>source</em> 和 <em>rendered</em> 两个视图功能。</p>
<p><img src="https://github-images.s3.amazonaws.com/help/repository/rendered_prose_diff.png" alt="Source / Rendered view"></p>
<p>点击 “rendered” 按钮，看看改动在渲染后的显示效果。当你添加、删除或修改文本时，渲染纯文本视图非常方便。</p>
<p><img src="https://f.cloud.github.com/assets/17715/2003056/3997edb4-862b-11e3-90be-5e9586edecd7.png" alt="Rendered Prose Diffs"></p>
<p><a href="https://github.com/blog/1784-rendered-prose-diffs" target="_blank" rel="external"><em>进一步了解渲染纯文本视图Diffs.</em></a></p>
<h4 id="可变化地图">可变化地图</h4>
<p>当你在GitHub上查看一个包含地理数据的提交或pull request时，Github可以显示数据变动的视觉表示。</p>
<p><a href="https://github.com/benbalter/congressional-districts/commit/2233c76ca5bb059582d796f053775d8859198ec5" target="_blank" rel="external"><img src="https://f.cloud.github.com/assets/282759/2090660/63f2e45a-8e97-11e3-9d8b-d4c8078b004e.gif" alt="Diffable Maps"></a></p>
<p><a href="https://github.com/blog/1772-diffable-more-customizable-maps" target="_blank" rel="external"><em>进一步了解可比较地图.</em></a></p>
<h4 id="在diff中折叠与扩展代码">在diff中折叠与扩展代码</h4>
<p>你可以通过点击diff边栏里的 <em>unfold</em> 按钮来多显示几行上下文。你可以一直点击 <em>unfold</em> 按钮直到显示了文件的全部内容。这个功能在所有GitHub产生的diff界面都可以使用。</p>
<p><img src="https://f.cloud.github.com/assets/22635/1610539/863c1f64-5584-11e3-82bf-151b406a272f.gif" alt="Expanding Context in Diffs"></p>
<p><a href="https://github.com/blog/1705-expanding-context-in-diffs" target="_blank" rel="external"><em>进一步了解扩展Diff上下文.</em></a></p>
<h4 id="查看Pull_Request的diff和patch">查看Pull Request的diff和patch</h4>
<p>在Pull Request的URL后面加上 <code>.diff</code> 或 <code>.patch</code> 的扩展名就可以得到它的diff或patch文件，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tiimgreen/github-cheat-sheet/pull/<span class="number">15</span></div><div class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tiimgreen/github-cheat-sheet/pull/<span class="number">15</span>.diff</div><div class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tiimgreen/github-cheat-sheet/pull/<span class="number">15</span>.patch</div></pre></td></tr></table></figure>

<p><code>.diff</code> 扩展会使用普通文本格式显示如下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">diff --git a/README.md b/README.md</div><div class="line">index 88fcf69..8614873 100644</div><div class="line"><span class="horizontal_rule">--- a/README.md</span></div><div class="line">+++ b/README.md</div><div class="line">@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i</div><div class="line"> - [<span class="link_label">Merged Branches</span>](<span class="link_url">#merged-branches</span>)</div><div class="line"> - [<span class="link_label">Quick Licensing</span>](<span class="link_url">#quick-licensing</span>)</div><div class="line"> - [<span class="link_label">TODO Lists</span>](<span class="link_url">#todo-lists</span>)</div><div class="line">+- [<span class="link_label">Relative Links</span>](<span class="link_url">#relative-links</span>)</div><div class="line"> - [<span class="link_label">.gitconfig Recommendations</span>](<span class="link_url">#gitconfig-recommendations</span>)</div><div class="line"><span class="code">     - [Aliases](#aliases)</span></div><div class="line"><span class="code">     - [Auto-correct](#auto-correct)</span></div><div class="line">@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:</div><div class="line"> - [ ] Sleep</div><div class="line"></div><div class="line">(...)</div></pre></td></tr></table></figure>

<h4 id="渲染图像发生的变动">渲染图像发生的变动</h4>
<p>GitHub可以显示包括PNG、JPG、GIF、PSD在内的多种图片格式并提供了几种方式来比较这些格式的图片文件版本间的不同。</p>
<p><a href="https://github.com/blog/1845-psd-viewing-diffing" target="_blank" rel="external"><img src="https://cloud.githubusercontent.com/assets/2546/3165594/55f2798a-eb56-11e3-92e7-b79ad791a697.gif" alt="Diffable PSD"></a></p>
<p><a href="https://help.github.com/articles/rendering-and-diffing-images" target="_blank" rel="external"><em>查看更多关于渲染图像变动的内容</em></a></p>
<h3 id="Hub">Hub</h3>
<p><a href="https://github.com/github/hub" target="_blank" rel="external">Hub</a>是一个对Git进行了封装的命令行工具，可以帮助你更方便的使用Github。</p>
<p>这使得你可以像下面这样进行克隆：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hub clone tiimgreen/toc</div></pre></td></tr></table></figure>

<p><a href="https://github.com/github/hub#commands" target="_blank" rel="external"><em>查看更多Hub提供的超酷命令.</em></a></p>
<h3 id="贡献内容的自动检查">贡献内容的自动检查</h3>
<p>假设你想人们使用你的项目并给你的项目做出贡献，你往往需要回答他们常见问题。这个项目是干什么用的？我如何使用它？允许我怎样使用？我如何为项目出力？我怎样配置开发环境？我怎么能保证新功能不会破坏已有的功能？</p>
<p><a href="https://github.com/rafalchmiel/friction" target="_blank" rel="external">Friction</a>是一个命令行脚本，用来检查你的项目是否<a href="https://github.com/rafalchmiel/friction/wiki" target="_blank" rel="external">回答了这些问题</a>。下面是示例输出：</p>
<p><a href="https://github.com/rafalchmiel/friction" target="_blank" rel="external"><img src="http://i.imgur.com/4EgpWo4.png" alt="Friction output"></a></p>
<p><em>Friction 支持 MRI 2.1.0, MRI 2.0.0 和 MRI 1.9.3.</em></p>
<h3 id="贡献者指南">贡献者指南</h3>
<p>在你的仓库的根目录添加一个名为 <code>CONTRIBUTING</code> 的文件后，贡献者在新建Issue或Pull Request时会看到这个文件的链接。</p>
<p><img src="https://camo.githubusercontent.com/71995d6b0e620a9ef1ded00a04498241c69dd1bf/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f6973737565732d32303132303931332d3136323533392e6a7067" alt="Contributing Guidelines"></p>
<p><a href="https://github.com/blog/1184-contributing-guidelines" target="_blank" rel="external"><em>进一步了解贡献者指南.</em></a></p>
<h3 id="GitHub资源">GitHub资源</h3>
<table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub Explore</td>
<td><a href="https://github.com/explore" target="_blank" rel="external">https://github.com/explore</a></td>
</tr>
<tr>
<td>GitHub Blog</td>
<td><a href="https://github.com/blog" target="_blank" rel="external">https://github.com/blog</a></td>
</tr>
<tr>
<td>GitHub Help</td>
<td><a href="https://help.github.com/" target="_blank" rel="external">https://help.github.com/</a></td>
</tr>
<tr>
<td>GitHub Training</td>
<td><a href="http://training.github.com/" target="_blank" rel="external">http://training.github.com/</a></td>
</tr>
<tr>
<td>GitHub Developer</td>
<td><a href="https://developer.github.com/" target="_blank" rel="external">https://developer.github.com/</a></td>
</tr>
</tbody>
</table>
<h4 id="GitHub讨论">GitHub讨论</h4>
<table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>How GitHub Uses GitHub to Build GitHub</td>
<td><a href="https://www.youtube.com/watch?v=qyz3jkOBbQY" target="_blank" rel="external">https://www.youtube.com/watch?v=qyz3jkOBbQY</a></td>
</tr>
<tr>
<td>Introduction to Git with Scott Chacon of GitHub</td>
<td><a href="https://www.youtube.com/watch?v=ZDR433b0HJY" target="_blank" rel="external">https://www.youtube.com/watch?v=ZDR433b0HJY</a></td>
</tr>
<tr>
<td>How GitHub No Longer Works</td>
<td><a href="https://www.youtube.com/watch?v=gXD1ITW7iZI" target="_blank" rel="external">https://www.youtube.com/watch?v=gXD1ITW7iZI</a></td>
</tr>
<tr>
<td>Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=Foz9yvMkvlA" target="_blank" rel="external">https://www.youtube.com/watch?v=Foz9yvMkvlA</a></td>
</tr>
<tr>
<td>More Git and GitHub Secrets</td>
<td><a href="https://www.youtube.com/watch?v=p50xsL-iVgU" target="_blank" rel="external">https://www.youtube.com/watch?v=p50xsL-iVgU</a></td>
</tr>
</tbody>
</table>
<h2 id="Git">Git</h2>
<h3 id="前一个分支">前一个分支</h3>
<p>快速检出上一个分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'master'</span></div><div class="line"></div><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'next'</span></div><div class="line"></div><div class="line">$ git checkout -</div><div class="line"><span class="comment"># Switched to branch 'master'</span></div></pre></td></tr></table></figure>

<p><a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="external"><em>进一步了解 Git 分支.</em></a></p>
<h3 id="Stripspace命令">Stripspace命令</h3>
<p>Git Stripspace命令可以:</p>
<ul>
<li>去掉行尾空白符</li>
<li>多个空行压缩成一行</li>
<li>必要时在文件末尾增加一个空行</li>
</ul>
<p>使用此命令时必须传入一个文件，像这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stripspace &lt; README.md</div></pre></td></tr></table></figure>

<p><a href="http://git-scm.com/docs/git-stripspace" target="_blank" rel="external"><em>进一步了解 Git <code>stripspace</code> 命令.</em></a></p>
<h3 id="检出Pull_Requests">检出Pull Requests</h3>
<p>Pull Request是一种GitHub上可以通过以下多种方式在本地被检索的特别分支：</p>
<p>检索某个分支并临时储存在本地的<code>FETCH_HEAD</code>中以便快速查看更改(diff)以及合并(merge)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin refs/pull/[PR-Number]/head</div></pre></td></tr></table></figure>

<p>通过refspec获取所有的Pull Request为本地分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin <span class="string">'+refs/pull/*/head:refs/remotes/origin/pr/*'</span></div></pre></td></tr></table></figure>

<p>或在仓库的<code>.git/config</code>中加入下列设置来自动获取远程仓库中的Pull Request</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[remote <span class="string">"origin"</span>]</div><div class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/origin/*</span></div><div class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>tiimgreen/github-cheat-sheet.git</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[remote <span class="string">"origin"</span>]</div><div class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/origin/*</span></div><div class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>tiimgreen/github-cheat-sheet.git</div><div class="line">    fetch = +refs/pull/*<span class="regexp">/head:refs/remotes</span><span class="regexp">/origin/pr</span><span class="regexp">/*</span></div></pre></td></tr></table></figure>

<p>对基于派生库的Pull Request，可以通过先<code>checkout</code>代表此Pull Request的远端分支再由此分支建立一个本地分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout pr/<span class="number">42</span> pr-<span class="number">42</span></div></pre></td></tr></table></figure>

<p>操作多个仓库的时候，可以在Git中设置获取Pull Request的全局选项。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> --<span class="built_in">add</span> remote.origin.fetch <span class="string">"+refs/pull/*/head:refs/remotes/origin/pr/*"</span></div></pre></td></tr></table></figure>

<p>此时可以在任意仓库中使用以下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> fetch origin</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout pr/<span class="number">42</span></div></pre></td></tr></table></figure>

<p><a href="https://help.github.com/articles/checking-out-pull-requests-locally" target="_blank" rel="external"><em>进一步了解如何检出pull request到本地.</em></a></p>
<h3 id="提交空改动_:trollface:">提交空改动 :trollface:</h3>
<p>可以使用<code>--allow-empty</code>选项强制创建一个没有任何改动的提交：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Big-ass commit"</span> --allow-empty</div></pre></td></tr></table></figure>

<p>这样做在如下几种情况下是有意义的：</p>
<ul>
<li>标记一批工作或一个新功能的开始。</li>
<li>记录你对项目进行了跟代码无关的改动。</li>
<li>跟使用你仓库的其他人交流。</li>
<li>作为仓库的第一次提交，因为第一次提交日后是不能被rebase的： <code>git commit -m &quot;init repo&quot; --allow-empty</code>.</li>
</ul>
<h3 id="更直观的Git_Status">更直观的Git Status</h3>
<p>在命令行输入如下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>

<p>可以看到:</p>
<p><img src="http://i.imgur.com/o3PEHAA.png" alt="git status"></p>
<p>加上<code>-sb</code>选项:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status -sb</div></pre></td></tr></table></figure>

<p>这回得到:</p>
<p><img src="http://i.imgur.com/xNI1bT0.png" alt="git status -sb"></p>
<p><a href="http://git-scm.com/docs/git-status" target="_blank" rel="external"><em>进一步了解 Git <code>status</code> 命令.</em></a></p>
<h3 id="更直观的Git_Log">更直观的Git Log</h3>
<p>输入如下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --all --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</div></pre></td></tr></table></figure>

<p>可以看到:</p>
<p><img src="http://i.imgur.com/R2z8l7c.png" alt="git log --all --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative"></p>
<p>这要归功于<a href="http://stackoverflow.com/users/88355/palesz" target="_blank" rel="external">Palesz</a>在stackoverflow的回答。</p>
<p><em>这个命令可以被用作别名，详细做法见<a href="https://github.com/tiimgreen/github-cheat-sheet#aliases" target="_blank" rel="external">这里</a>。</em></p>
<p><a href="http://git-scm.com/docs/git-log" target="_blank" rel="external"><em>进一步了解 Git <code>log</code> 命令.</em></a></p>
<h3 id="Git查询">Git查询</h3>
<p>Git查询运行你在之前的所有提交信息里进行搜索，找到其中和搜索条件相匹配的最近的一条。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show :/query</div></pre></td></tr></table></figure>

<p>这里 <code>query</code> （区别大小写）是你想要搜索的词语， 这条命令会找到包含这个词语的最后那个提交并显示变动详情。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show :/typo</div></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/icaGiNt.png" alt="git show :/query"></p>
<ul>
<li>按 <code>q</code> 键退出命令。*</li>
</ul>
<h3 id="合并分支">合并分支</h3>
<p>输入命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --merged</div></pre></td></tr></table></figure>

<p>这会显示所有已经合并到你当前分支的分支列表。 </p>
<p>相反地：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --no-merged</div></pre></td></tr></table></figure>

<p>会显示所有还没有合并到你当前分支的分支列表。</p>
<p><a href="http://git-scm.com/docs/git-branch" target="_blank" rel="external"><em>进一步了解 Git <code>branch</code> 命令.</em></a></p>
<h3 id="使用网页查看本地仓库">使用网页查看本地仓库</h3>
<p>使用Git的 <code>instaweb</code> 可以立即在 <code>gitweb</code>中浏览你的工作仓库。这个命令是个简单的脚步，配置了<code>gitweb</code>和用来浏览本地仓库的Web服务器。<em>（译者注：默认需要lighttpd支持）</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git instaweb</div></pre></td></tr></table></figure>

<p>执行后打开：</p>
<p><img src="http://i.imgur.com/Dxekmqc.png" alt="Git instaweb"></p>
<p><a href="http://git-scm.com/docs/git-instaweb" target="_blank" rel="external"><em>进一步了解 Git <code>instaweb</code> 命令.</em></a></p>
<h3 id="Git配置">Git配置</h3>
<p>所有Git配置都保存在你的<code>.gitconfig</code> 文件中。</p>
<h4 id="Git命令自定义别名">Git命令自定义别名</h4>
<p>别名用来帮助你定义自己的git命令。比如你可以定义 <code>git a</code> 来运行 <code>git add --all</code>。</p>
<p>要添加一个别名， 一种方法是打开 <code>~/.gitconfig</code> 文件并添加如下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  <span class="keyword">co</span> = checkout</div><div class="line">  <span class="keyword">cm</span> = commit</div><div class="line">  <span class="keyword">p</span> = push</div><div class="line">  # Show <span class="keyword">verbose</span> output about <span class="keyword">tags</span>, branches <span class="built_in">or</span> remotes</div><div class="line">  <span class="keyword">tags</span> = <span class="keyword">tag</span> -<span class="keyword">l</span></div><div class="line">  branches = branch -<span class="keyword">a</span></div><div class="line">  remotes = remote -<span class="keyword">v</span></div></pre></td></tr></table></figure>

<p>…或者在命令行里键入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.new_alias git_function</div></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.cm commit</div></pre></td></tr></table></figure>

<p>指向多个命令的别名可以用引号来定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.ac <span class="string">'add -A . && commit'</span></div></pre></td></tr></table></figure>

<p>下面列出了一些有用的别名：</p>
<table>
<thead>
<tr>
<th>别名 Alias</th>
<th>命令 Command</th>
<th>如何设置 What to Type</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git cm</code></td>
<td><code>git commit</code></td>
<td><code>git config --global alias.cm commit</code></td>
</tr>
<tr>
<td><code>git co</code></td>
<td><code>git checkout</code></td>
<td><code>git config --global alias.co checkout</code></td>
</tr>
<tr>
<td><code>git ac</code></td>
<td><code>git add . -A</code> <code>git commit</code></td>
<td><code>git config --global alias.ac &#39;!git add -A &amp;&amp; git commit&#39;</code></td>
</tr>
<tr>
<td><code>git st</code></td>
<td><code>git status -sb</code></td>
<td><code>git config --global alias.st &#39;status -sb&#39;</code></td>
</tr>
<tr>
<td><code>git tags</code></td>
<td><code>git tag -l</code></td>
<td><code>git config --global alias.tags &#39;tag -l&#39;</code></td>
</tr>
<tr>
<td><code>git branches</code></td>
<td><code>git branch -a</code></td>
<td><code>git config --global alias.branches &#39;branch -a&#39;</code></td>
</tr>
<tr>
<td><code>git remotes</code></td>
<td><code>git remote -v</code></td>
<td><code>git config --global alias.remotes &#39;remote -v&#39;</code></td>
</tr>
<tr>
<td><code>git lg</code></td>
<td><code>git log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --</code></td>
<td><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --&quot;</code></td>
</tr>
</tbody>
</table>
<h4 id="自动更正">自动更正</h4>
<p>如果键入 <code>git comit</code> 你会看到如下输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git comit -m <span class="string">"Message"</span></div><div class="line"><span class="comment"># git: 'comit' is not a git command. See 'git --help'.</span></div><div class="line"></div><div class="line"><span class="comment"># Did you mean this?</span></div><div class="line"><span class="comment">#   commit</span></div></pre></td></tr></table></figure>

<p>为了在键入 <code>comit</code> 调用 <code>commit</code>命令，只需启用自动纠错功能：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global help.autocorrect <span class="number">1</span></div></pre></td></tr></table></figure>

<p>现在你就会看到：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git comit -m <span class="string">"Message"</span></div><div class="line"><span class="comment"># WARNING: You called a Git command named 'comit', which does not exist.</span></div><div class="line"><span class="comment"># Continuing under the assumption that you meant 'commit'</span></div><div class="line"><span class="comment"># in 0.1 seconds automatically...</span></div></pre></td></tr></table></figure>

<h4 id="带颜色输出">带颜色输出</h4>
<p>要在你的Git命令输出里加上颜色的话，可以用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global color.ui <span class="number">1</span></div></pre></td></tr></table></figure>

<p><a href="http://git-scm.com/docs/git-config" target="_blank" rel="external"><em>进一步了解 Git <code>config</code> 命令.</em></a></p>
<h3 id="Git资源">Git资源</h3>
<table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Official Git Site</td>
<td><a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a></td>
</tr>
<tr>
<td>Official Git Video Tutorials</td>
<td><a href="http://git-scm.com/videos" target="_blank" rel="external">http://git-scm.com/videos</a></td>
</tr>
<tr>
<td>Code School Try Git</td>
<td><a href="http://try.github.com/" target="_blank" rel="external">http://try.github.com/</a></td>
</tr>
<tr>
<td>Introductory Reference &amp; Tutorial for Git</td>
<td><a href="http://gitref.org/" target="_blank" rel="external">http://gitref.org/</a></td>
</tr>
<tr>
<td>Official Git Tutorial</td>
<td><a href="http://git-scm.com/docs/gittutorial" target="_blank" rel="external">http://git-scm.com/docs/gittutorial</a></td>
</tr>
<tr>
<td>Everyday Git</td>
<td><a href="http://git-scm.com/docs/everyday" target="_blank" rel="external">http://git-scm.com/docs/everyday</a></td>
</tr>
<tr>
<td>Git Immersion</td>
<td><a href="http://gitimmersion.com/" target="_blank" rel="external">http://gitimmersion.com/</a></td>
</tr>
<tr>
<td>Ry’s Git Tutorial</td>
<td><a href="http://rypress.com/tutorials/git/index.html" target="_blank" rel="external">http://rypress.com/tutorials/git/index.html</a></td>
</tr>
<tr>
<td>Git for Designer</td>
<td><a href="http://hoth.entp.com/output/git_for_designers.html" target="_blank" rel="external">http://hoth.entp.com/output/git_for_designers.html</a></td>
</tr>
<tr>
<td>Git for Computer Scientists</td>
<td><a href="http://eagain.net/articles/git-for-computer-scientists/" target="_blank" rel="external">http://eagain.net/articles/git-for-computer-scientists/</a></td>
</tr>
<tr>
<td>Git Magic</td>
<td><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/" target="_blank" rel="external">http://www-cs-students.stanford.edu/~blynn/gitmagic/</a></td>
</tr>
</tbody>
</table>
<h4 id="Git参考书籍">Git参考书籍</h4>
<table>
<thead>
<tr>
<th>Title</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pragmatic Version Control Using Git</td>
<td><a href="http://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git" target="_blank" rel="external">http://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git</a></td>
</tr>
<tr>
<td>Pro Git</td>
<td><a href="http://git-scm.com/book" target="_blank" rel="external">http://git-scm.com/book</a></td>
</tr>
<tr>
<td>Git Internals Peepcode</td>
<td><a href="http://peepcode.com/products/git-internals-pdf" target="_blank" rel="external">http://peepcode.com/products/git-internals-pdf</a></td>
</tr>
<tr>
<td>Git in the Trenches</td>
<td><a href="http://cbx33.github.com/gitt/" target="_blank" rel="external">http://cbx33.github.com/gitt/</a></td>
</tr>
<tr>
<td>Version Control with Git</td>
<td><a href="http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387" target="_blank" rel="external">http://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387</a></td>
</tr>
<tr>
<td>Pragmatic Guide to Git</td>
<td><a href="http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git" target="_blank" rel="external">http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git</a></td>
</tr>
<tr>
<td>Git: Version Control for Everyone</td>
<td><a href="http://www.packtpub.com/git-version-control-for-everyone/book" target="_blank" rel="external">http://www.packtpub.com/git-version-control-for-everyone/book</a></td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[本秘籍收录了一些 Git 和 Github 非常酷同时又少有人知的功能。]]>
    
    </summary>
    
      <category term="Git" scheme="http://jianyan.me/tags/Git/"/>
    
      <category term="GitHub" scheme="http://jianyan.me/tags/GitHub/"/>
    
      <category term="Markdown" scheme="http://jianyan.me/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django 中设置 css/js/images 路径的方法]]></title>
    <link href="http://jianyan.me/2014/09/18/django-sets-the-css-js-images-path/"/>
    <id>http://jianyan.me/2014/09/18/django-sets-the-css-js-images-path/</id>
    <published>2014-09-18T13:30:00.000Z</published>
    <updated>2014-12-10T16:05:58.000Z</updated>
    <content type="html"><![CDATA[<p>在 settings.py 的最后一行你可以看到 <code>STATIC_URL = &#39;/static/&#39;</code> 这句话，在其后面加上：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">STATIC_ROOT = os.path.join(os.path.dirname(__file__), <span class="string">'static'</span>)</div><div class="line"></div><div class="line">STATICFILES_DIRS = (</div><div class="line">    (<span class="string">'css'</span>, os.path.join(STATIC_ROOT, <span class="string">'css'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>) ),</div><div class="line">    (<span class="string">'js'</span>, os.path.join(STATIC_ROOT, <span class="string">'js'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>) ),</div><div class="line">    (<span class="string">'images'</span>, os.path.join(STATIC_ROOT, <span class="string">'images'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>) ),</div><div class="line">)</div></pre></td></tr></table></figure>

<p>然后把你的 css/js/images 那些文件夹都丢进 static 文件夹中（此文件夹应建立在你的 view.py 所在目录下）<br>模板里面这么写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/static/css/login.css"</span>&gt;</span></div></pre></td></tr></table></figure>

<p>如果设置之后出现了与 Unicode 有关的错误，打开 <code>/Python27/Lib/mimetypes.py</code>，在 import 语句之后加入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> sys.getdefaultencoding() != <span class="string">'gbk'</span>:</div><div class="line">    reload(sys)</div><div class="line">    sys.setdefaultencoding(<span class="string">'gbk'</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[在 settings.py 的最后一行你可以看到 STATIC_URL = '/static/' 这句话，在其后面加上：]]>
    
    </summary>
    
      <category term="Django" scheme="http://jianyan.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git 用的越早，你就活得越久]]></title>
    <link href="http://jianyan.me/2014/07/04/earlier-for-git-youll-live-longer/"/>
    <id>http://jianyan.me/2014/07/04/earlier-for-git-youll-live-longer/</id>
    <published>2014-07-04T13:30:00.000Z</published>
    <updated>2014-12-09T08:44:06.000Z</updated>
    <content type="html"><![CDATA[<p>这是我最近这段时间使用 Git 的感受。<br>Git 的核心功能是版本控制，基于此，我们可以：</p>
<ol>
<li>利用其强大的「历史」功能，我们可以把一些频繁修改的东西（不仅限于代码），都使用 Git 来管理。这样，我们可以轻松找回 n 天前删掉的代码或文字。</li>
<li>利用其强大的「分支管理」功能，我们可以将某一项目的编码过程拆分成「受精卵-卵裂-原肠胚-器官形成-出生-发育」，同时再推广 Java 类库的设计思想，从而简化软件开发流程。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是我最近这段时间使用 Git 的感受。<br>Git 的核心功能是版本控制，基于此，我们可以：</p>
<ol>
<li>利用其强大的「历史」功能，我们可以把一些频繁修改的东西（不仅限于代码），都使用 Git 来管理。这样，我们可以轻松找回 n 天前删掉的代码或文字。</]]>
    </summary>
    
      <category term="Git" scheme="http://jianyan.me/tags/Git/"/>
    
      <category term="杂谈" scheme="http://jianyan.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python 爬虫学习——收集「有趣」信息（8月16日更新）]]></title>
    <link href="http://jianyan.me/2014/06/24/learning-python-crawler-gathering-interesting-information/"/>
    <id>http://jianyan.me/2014/06/24/learning-python-crawler-gathering-interesting-information/</id>
    <published>2014-06-24T13:30:00.000Z</published>
    <updated>2014-12-07T15:27:48.000Z</updated>
    <content type="html"><![CDATA[<p>我们使用 urllib2 这个组件来抓取网页，这是 Python 的一个获取 URLs (Uniform Resource Locators)的组件，它以 urlopen 函数的形式提供了一个非常简单的接口。</p>
<p>以获取某 <del>id 为 EndlessCheng</del> 用户的 repository 列表为例：</p>
<p>（阅读下面代码之前建议先看看 <a href="https://github.com/EndlessCheng?tab=repositories" target="_blank" rel="external">该页面</a> 的源码）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">USERNAME = <span class="string">'EndlessCheng'</span></div><div class="line">response = urllib2.urlopen(<span class="string">'https://github.com/'</span> + USERNAME + <span class="string">'?tab=repositories'</span>)  </div><div class="line">html = response.read()  </div><div class="line"></div><div class="line">STEP = <span class="number">20</span></div><div class="line">cnt = next = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    end = html.find(<span class="string">'&lt;/h3&gt;'</span>, next, len(html))  <span class="comment"># 获取 repolist-name 尾位置</span></div><div class="line">    <span class="keyword">if</span> end == -<span class="number">1</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    next = end + STEP</div><div class="line">    end = html.rfind(<span class="string">'&lt;/a&gt;'</span>, <span class="number">0</span>, end) </div><div class="line">    begin = html.rfind(<span class="string">'&gt;'</span>, <span class="number">0</span>, end) + <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"%3d  %s"</span> % (cnt, html[begin:end])</div><div class="line">    cnt += <span class="number">1</span></div></pre></td></tr></table></figure>

<p>源网页：</p>
<p><img src="http://endless.qiniudn.com/blogrepo.png" alt=""></p>
<p>输出结果：</p>
<p><img src="http://endless.qiniudn.com/blogoutput.png" alt=""></p>
<p>出于项目维护的需要，写了一个获取 Commits 列表的爬虫：<br>（晕，代码中的 EscapeCharacterDict 的转义字符被直接转换了，可以去 <a href="https://github.com/EndlessCheng/Commits-Crawler/blob/master/Core.py" target="_blank" rel="external">原项目</a> 查看）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">EscapeCharacterDict = {<span class="string">'&'</span>: <span class="string">'&'</span>, <span class="string">'&lt;'</span>: <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>: <span class="string">'&gt;'</span>, <span class="string">'"'</span>: <span class="string">'"'</span>, <span class="string">''': '\''}</span></div><div class="line"></div><div class="line"></div><div class="line">def deal(response):</div><div class="line">    html = response.read()</div><div class="line"></div><div class="line">    global cnt</div><div class="line">    global fp</div><div class="line">    step = 24</div><div class="line">    end = 1000</div><div class="line"></div><div class="line">    while True:</div><div class="line">        begin = html.find('data-pjax="true" title=', end, len(html))  # 获取 commit 首位置</div><div class="line">        if begin == -1:</div><div class="line">            break</div><div class="line">        begin += step</div><div class="line">        keywords = '"&gt;' if html[begin - 1] == '"' else '\'&gt;'</div><div class="line">        end = html.find(keywords, begin, len(html))</div><div class="line">        s = html[begin:end]</div><div class="line">        for k, v in EscapeCharacterDict.iteritems():</div><div class="line">            s = s.replace(k, v)</div><div class="line">        fp.write("%3d  %s\n" % (cnt, s))</div><div class="line">        cnt += 1</div><div class="line"></div><div class="line">USERNAME = 'rogerwang' # 修改这里</div><div class="line">REPONAME = 'node-webkit' # 修改这里</div><div class="line"></div><div class="line">fp = open(USERNAME + '#' + REPONAME + '#commits.txt', 'w')</div><div class="line"></div><div class="line">cnt = 1</div><div class="line">i = 1</div><div class="line">while True:</div><div class="line">    try:</div><div class="line">        response = urllib2.urlopen('https://github.com/' + USERNAME + '/' + REPONAME + '/commits?page=' + str(i))</div><div class="line">        deal(response)</div><div class="line">        print 'Cheaked', i, 'page(s).'</div><div class="line">        i += 1</div><div class="line">    except urllib2.HTTPError, err:</div><div class="line">        if err.code == 404:</div><div class="line">            print ''</div><div class="line">            print 'Cheaked', i - 1, 'page(s),', cnt - 1, 'commit(s) found.'</div><div class="line">            break</div><div class="line">        else:</div><div class="line">            raise</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[从获取 GitHub 等网站的我们感兴趣的信息开始，学习 Python 爬虫的使用方法。]]>
    
    </summary>
    
      <category term="Python" scheme="http://jianyan.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jianyan.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="GitHub" scheme="http://jianyan.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 与 C++ 混合编程——JNI 学习小记]]></title>
    <link href="http://jianyan.me/2014/06/21/notes-on-java-and-c-programming-jni-blended-learning/"/>
    <id>http://jianyan.me/2014/06/21/notes-on-java-and-c-programming-jni-blended-learning/</id>
    <published>2014-06-21T14:30:00.000Z</published>
    <updated>2014-12-07T15:17:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="缘起">缘起</h2>
<p>最近对<a href="http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/cf44386c8fe3/src/share/classes/java" target="_blank" rel="external">OpenJDK源码</a>产生了很大的兴趣，而其中有较多的native方法，如<a href="http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/cf44386c8fe3/src/share/classes/java/lang/System.java" target="_blank" rel="external">System.java</a>中的arraycopy方法（第482行）、setOut0方法（第247行）等。Google一下后发现这是Java Native Interface(JNI)，便花点时间学习了一下。</p>
<h2 id="何谓JNI？">何谓JNI？</h2>
<p>JNI是Java平台中的一个强大特性。<br>应用程序可以通过JNI把C/C++代码集成进Java程序中，这样开发者在利用Java平台强大功能的同时，又不必放弃对原有代码的投资。</p>
<h2 id="HelloWorld">HelloWorld</h2>
<p>闲话少说，先看代码：</p>
<a id="more"></a>

<p>新建一个class，名称为Algorithm</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Algorithm</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">static</span> {</div><div class="line">		System.loadLibrary(<span class="string">"Hello"</span>);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">write</span>(String msg);</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		write(<span class="string">"Hello, 混合编程！"</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>保存。</p>
<p>打开cmd，cd到\src，执行<code>javah Algorithm</code>（如果你的.java文件在某一package下的话，比如在\mjava\lang\里面，就执行<code>javah mjava.lang.Algorithm</code>），生成<code>Algorithm.h</code>文件，如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;jni.h&gt;</span></div><div class="line"><span class="comment">/* Header for class Algorithm */</span></div><div class="line"></div><div class="line"><span class="preprocessor">#ifndef _Included_Algorithm</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> _Included_Algorithm</span></div><div class="line"><span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> {</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     Algorithm</div><div class="line"> * Method:    write</div><div class="line"> * Signature: (Ljava/lang/String;)V</div><div class="line"> */</div><div class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_Algorithm_write</div><div class="line">  (JNIEnv *, jclass, jstring);</div><div class="line"></div><div class="line"><span class="preprocessor">#ifdef __cplusplus</span></div><div class="line">}</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p>对于Windows下的JDK来说，可以在JDK目录<code>\include\win32\jni_md.h</code>中找到如下定义</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">define</span> JNIEXPORT __declspec(dllexport)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> JNIIMPORT __declspec(dllimport)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> JNICALL __stdcall</span></div></pre></td></tr></table></figure>

<p>其中<code>__declspec</code>用于指定所给定类型的实例的与Microsoft相关的存储方式。<br><code>dllexport</code>用来从dll中导出函数，数据或对象，<code>dllimport</code>用来从dll导入函数，数据，或对象。<br>这相当于定义了dll的接口，提供可被Java使用的C/C++函数，数据，或对象。<br><code>__stdcall</code>见<a href="http://baike.baidu.com/view/1276580.htm" target="_blank" rel="external">百度百科</a>。<br><code>JNIEnv</code>，<code>jclass</code>和<code>jstring</code>的定义见<code>\include\jni.h</code>，也可以参考<a href="http://wenku.baidu.com/link?url=khOHgORmPEnOlIwZ_Zi7VBnueTNQcSp60EV-Grmiw12bgrLt0YT9rxTQq8PeOiBVecVewsW54EIBdKIt_DogruJUeqHaoYO9rFy8vDWs9Ce" target="_blank" rel="external">jni详解</a>。</p>
<p>随后打开VS2012，新建 Win32项目，名称随便：<br><img src="http://endless.qiniudn.com/blogjni01.png" alt=""><br>应用程序类型选择DLL：<br><img src="http://endless.qiniudn.com/blogjni02.png" alt=""><br>按<code>alt</code>+<code>F7</code>，点击<code>配置属性</code>-<code>VC++目录</code>，如果你的JDK是64位的话，你的VS2012也应该是64位，此时做如下修改：（32位可以无视）<br><img src="http://endless.qiniudn.com/blogjni05.png" alt=""><br>然后点击<code>包含目录</code>-<code>编辑</code>：<br><img src="http://endless.qiniudn.com/blogjni04.png" alt=""><br>点击文件夹图标，把<code>\include\</code>，<code>\include\win32\</code>和<code>Algorithm.h</code>所在目录加进去。<br>随后点击<code>常规</code>，把<code>配置类型</code>改为<code>动态库(.dll)</code>。</p>
<p>打开<code>&lt;项目名&gt;.cpp</code>，这里<code>&lt;项目名&gt;</code>是你自己输入的名字，输入如下代码：（函数名必须与Algorithm.h中声明的一致）</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "stdafx.h"</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "Algorithm.h"</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;clocale&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cwchar&gt;</span></div><div class="line"></div><div class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_Algorithm_write(JNIEnv * env, jclass obj, jstring jMsg)</div><div class="line">{</div><div class="line">	setlocale(LC_ALL, <span class="string">"Chinese-simplified"</span>); <span class="comment">// clocale</span></div><div class="line">	   wprintf(L<span class="string">"%ls"</span>, (<span class="keyword">wchar_t</span>*)env-&gt;GetStringChars(jMsg, NULL));</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里<code>setlocale</code>函数用来配置地域化信息，<code>GetStringChars</code>函数将jstring转化成jchar数组并返回jchar*，这里jchar被定义为unsigned short，所以可以转化成wchar_t类型。</p>
<p>按<code>F7</code>。</p>
<p>在你的项目文件夹中找到<code>&lt;项目名&gt;.dll</code>文件，复制，粘贴到你的工程下（直接在Eclipse中单击工程名然后<code>ctrl</code>+<code>V</code>），并重命名为<code>Hello.dll</code>。</p>
<p>回到Eclipse，按下<code>Ctrl</code>+<code>F11</code>，Well done！<br><img src="http://endless.qiniudn.com/blogjni06.png" alt=""></p>
<h2 id="More">More</h2>
<p>自定义readLine()方法的实现，见<a href="https://github.com/EndlessCheng/OpenJDK-7u4-analysis" target="_blank" rel="external">GitHub</a></p>
]]></content>
    <summary type="html">
    <![CDATA[最近对 OpenJDK 源码产生了很大的兴趣，而其中有较多的 native 方法，遂花点时间研究了下 JNI，本文就是教你如何入门的。(for Windows)]]>
    
    </summary>
    
      <category term="混合编程" scheme="http://jianyan.me/tags/%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JNI" scheme="http://jianyan.me/tags/JNI/"/>
    
      <category term="「Hello World」" scheme="http://jianyan.me/tags/%E3%80%8CHello-World%E3%80%8D/"/>
    
      <category term="Java" scheme="http://jianyan.me/tags/Java/"/>
    
      <category term="C" scheme="http://jianyan.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何搭建免费静态博客——Hexo 与 GitHub 使用小记]]></title>
    <link href="http://jianyan.me/2014/06/21/how-to-build-a-free-static-blog-hexo-and-github-notes/"/>
    <id>http://jianyan.me/2014/06/21/how-to-build-a-free-static-blog-hexo-and-github-notes/</id>
    <published>2014-06-21T13:30:00.000Z</published>
    <updated>2014-12-09T07:45:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="缘起">缘起</h2>
<p>把网页托管在 GitHub 上有什么好处呢？——秒开。（吐槽下某些空间服务商的速度。。）<br>其次，可能你会遇到修改了某些文字之后又想改回去的情况，这时 Github 上保存的历史记录就会帮到你了。</p>
<h2 id="快速搭建">快速搭建</h2>
<p>1.首先参见最简单的搭建教程：<a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">Github+Hexo搭建静态Blog小结</a></p>
<p><strong>注意，若生成文章之后首页文章显示异常（如出现空白文章或重复文章等），请先<code>hexo clean</code>之后再<code>hexo g</code></strong></p>
<p>2.然后修改成 Jacman 主题（或者你喜欢的其他主题）：在根目录下右键选择 Git Bash 输入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/wuchong/jacman.git themes/jacman</div></pre></td></tr></table></figure>

<p>3.修改<code>./_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>jacman</code>。然后在<code>deploy</code>前面加入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stylu<span class="variable">s:</span></div><div class="line">   compres<span class="variable">s:</span> true</div></pre></td></tr></table></figure>

<p>4.在<code>./source</code>文件夹中建立<code>tags</code>、<code>categories</code>和<code>about</code>文件夹，各文件夹内部新建一个<code>index.md</code>文件。内容分别为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: tags</div><div class="line"><span class="header">title: tags</span></div><div class="line">---</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: categories</div><div class="line"><span class="header">title: categories</span></div><div class="line">---</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="header">title: 关于我</span></div><div class="line">---</div><div class="line">&lt;自我介绍&gt;</div></pre></td></tr></table></figure>

<p>如果你想让你的 tags 有标签云的效果，把<code>./themes/&lt;你的主题&gt;/_config.yml中widgets</code>下的<code>tag</code>修改成<code>tagcloud</code></p>
<p>5.完成上述步骤后在 sync 时可能会遇到<code>fancybox</code>文件夹内部的文件无法同步的问题，这时需要在<code>./fancybox</code>下右键打开 Git Bash，输入以下内容即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">"update fancybox"</span></div></pre></td></tr></table></figure>

<p>6.添加 Disqus（多说明明有回复评论后邮箱提醒却不给我发邮件，差评）：点击 <a href="https://disqus.com/" target="_blank" rel="external">https://disqus.com/</a> 添加站点，填完，记住<code>shortname</code>中填的名字，无视掉验证。然后打开<code>./themes/&lt;你的主题&gt;/_config.yml</code>，找到<code>disqus_shortname</code>，修改如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">disqus_shortname</span>: <span class="string">&lt;你填的名字&gt;</span></div></pre></td></tr></table></figure>

<p>7.添加 RSS：在根目录下运行 Git Bash，输入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed</span></div></pre></td></tr></table></figure>

<p>然后编辑<code>./_config.yml</code>，添加如下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugin<span class="variable">s:</span></div><div class="line">- hexo-generator-feed</div></pre></td></tr></table></figure>

<p>之后确认在<code>./themes/&lt;你的主题&gt;/_config.yml</code>中有<code>rss: /atom.xml</code>这一行（Jacman 主题自带）</p>
<p>8.写新文章时，建议在<code>---</code>上方添加<code>description: &lt;文章纲要&gt;</code></p>
<p>9.添加 <a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>：有两种方法, 一种是默认加载, 一种是异步加载。<br>默认加载这种方式只需将代码添加至网站全部页面的<code>&lt;body&gt;</code>标签<strong>前</strong>, 因此只需要在<code>./themes/&lt;你的主题&gt;/layout/_partial/after_footer.ejs</code>里添加如下代码（这里添加的是我的代码, 请适当修改）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> _bdhmProtocol = ((<span class="string">"https:"</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"%3Cscript src='"</span> + _bdhmProtocol + <span class="string">"hm.baidu.com/h.js%3Fcfedc723a9dc30bd7db67ad8e53a97fa' type='text/javascript'%3E%3C/script%3E"</span>));</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>百度统计异步代码是以异步加载形式加载了网站分析代码，使用该代码能够大幅提升您网站的打开速度(目前使用百度统计异步代码会导致百度统计图标和代码检查功能的失效).使用这种方式需要将代码添加至网站全部页面的标签前, 因此只需要在<code>./themes/&lt;你的主题&gt;/layout/_partial/head.ejs</code>里添加如下代码（这里添加的是我的代码, 请适当修改）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> _hmt = _hmt || [];</div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">  hm.src = <span class="string">"//hm.baidu.com/hm.js?efd32d79f8a09abef26865f3b17a3fc7"</span>;</div><div class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </div><div class="line">  s.parentNode.insertBefore(hm, s);</div><div class="line">})();</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>10.添加 sitemap：在根目录下运行 Git Bash，输入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-sitemap</span></div></pre></td></tr></table></figure>

<p>然后编辑<code>./_config.yml</code>，添加如下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugin<span class="variable">s:</span></div><div class="line">- hexo-generator-sitemap</div></pre></td></tr></table></figure>

<p>随后提交给 Google 网站站长工具即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[参考了下别人的经验，无需配置 SSH 等麻烦操作。]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://jianyan.me/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://jianyan.me/tags/GitHub/"/>
    
      <category term="Jacman" scheme="http://jianyan.me/tags/Jacman/"/>
    
  </entry>
  
</feed>
